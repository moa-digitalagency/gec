#!/usr/bin/env python3
"""
Script d'audit de s√©curit√© pour GEC Mines
V√©rifie l'√©tat de la s√©curit√© et g√©n√®re un rapport
"""

import os
import sys
import hashlib
from datetime import datetime, timedelta

def check_security_configuration():
    """V√©rifie la configuration de s√©curit√©"""
    
    print("=== AUDIT DE S√âCURIT√â GEC MINES ===")
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    issues = []
    warnings = []
    
    # 1. V√©rifier les variables d'environnement de s√©curit√©
    print("\n1. Variables d'environnement de s√©curit√©:")
    required_vars = ['GEC_MASTER_KEY', 'GEC_PASSWORD_SALT', 'SESSION_SECRET']
    
    for var in required_vars:
        if os.environ.get(var):
            print(f"   ‚úÖ {var}: Configur√©e")
        else:
            print(f"   ‚ùå {var}: MANQUANTE")
            issues.append(f"Variable d'environnement manquante: {var}")
    
    # 2. V√©rifier les permissions des fichiers
    print("\n2. Permissions des fichiers:")
    sensitive_files = ['.env', 'keys_backup_*.txt']
    
    for pattern in sensitive_files:
        if '*' in pattern:
            import glob
            files = glob.glob(pattern)
            for file in files:
                if os.path.exists(file):
                    stat = os.stat(file)
                    perms = oct(stat.st_mode)[-3:]
                    if perms != '600':
                        print(f"   ‚ö†Ô∏è  {file}: Permissions {perms} (recommand√©: 600)")
                        warnings.append(f"Permissions faibles sur {file}")
                    else:
                        print(f"   ‚úÖ {file}: Permissions s√©curis√©es")
        else:
            if os.path.exists(pattern):
                stat = os.stat(pattern)
                perms = oct(stat.st_mode)[-3:]
                if perms != '600':
                    print(f"   ‚ö†Ô∏è  {pattern}: Permissions {perms} (recommand√©: 600)")
                    warnings.append(f"Permissions faibles sur {pattern}")
                else:
                    print(f"   ‚úÖ {pattern}: Permissions s√©curis√©es")
    
    # 3. V√©rifier la base de donn√©es
    print("\n3. Configuration de la base de donn√©es:")
    
    try:
        from app import app, db
        from models import User, Courrier
        
        with app.app_context():
            # V√©rifier les colonnes crypt√©es
            user_count = User.query.count()
            encrypted_users = User.query.filter(User.email_encrypted.isnot(None)).count()
            
            courrier_count = Courrier.query.count()
            encrypted_courriers = Courrier.query.filter(Courrier.objet_encrypted.isnot(None)).count()
            
            print(f"   Utilisateurs: {encrypted_users}/{user_count} crypt√©s")
            print(f"   Courriers: {encrypted_courriers}/{courrier_count} crypt√©s")
            
            if encrypted_users < user_count:
                warnings.append(f"{user_count - encrypted_users} utilisateurs non crypt√©s")
            
            if encrypted_courriers < courrier_count:
                warnings.append(f"{courrier_count - encrypted_courriers} courriers non crypt√©s")
    
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification: {e}")
        issues.append("Impossible de v√©rifier la base de donn√©es")
    
    # 4. V√©rifier l'int√©grit√© des fichiers
    print("\n4. Int√©grit√© des fichiers:")
    
    try:
        from app import app
        from models import Courrier
        from encryption_utils import encryption_manager
        
        with app.app_context():
            courriers_avec_fichiers = Courrier.query.filter(
                Courrier.fichier_chemin.isnot(None)
            ).all()
            
            files_ok = 0
            files_error = 0
            
            for courrier in courriers_avec_fichiers[:10]:  # V√©rifier les 10 premiers
                file_path = os.path.join('uploads', courrier.fichier_chemin)
                if os.path.exists(file_path):
                    if courrier.verify_file_integrity(file_path):
                        files_ok += 1
                    else:
                        files_error += 1
                        warnings.append(f"Fichier corrompu: {courrier.fichier_nom}")
                else:
                    files_error += 1
                    warnings.append(f"Fichier manquant: {courrier.fichier_nom}")
            
            print(f"   Fichiers v√©rifi√©s: {files_ok} OK, {files_error} erreurs")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification: {e}")
        warnings.append("Impossible de v√©rifier l'int√©grit√© des fichiers")
    
    # 5. V√©rifier les logs de s√©curit√©
    print("\n5. Logs de s√©curit√©:")
    
    # V√©rifier si les logs d'audit existent
    if os.path.exists('security.log'):
        stat = os.stat('security.log')
        size = stat.st_size
        print(f"   ‚úÖ security.log: {size} bytes")
    else:
        print("   ‚ö†Ô∏è  security.log: Non trouv√©")
        warnings.append("Logs de s√©curit√© non configur√©s")
    
    # 6. V√©rifier les dossiers s√©curis√©s
    print("\n6. S√©curit√© des dossiers:")
    
    secure_dirs = ['uploads', 'exports', 'backups']
    for directory in secure_dirs:
        if os.path.exists(directory):
            stat = os.stat(directory)
            perms = oct(stat.st_mode)[-3:]
            if perms in ['755', '750']:
                print(f"   ‚úÖ {directory}/: Permissions OK ({perms})")
            else:
                print(f"   ‚ö†Ô∏è  {directory}/: Permissions {perms}")
                warnings.append(f"Permissions du dossier {directory} √† v√©rifier")
        else:
            print(f"   ‚ÑπÔ∏è  {directory}/: N'existe pas")
    
    # G√©n√©rer le rapport
    print("\n" + "=" * 50)
    print("R√âSUM√â DE L'AUDIT")
    print("=" * 50)
    
    if not issues and not warnings:
        print("üéâ EXCELLENTE S√âCURIT√â! Aucun probl√®me d√©tect√©.")
        return 0
    
    if issues:
        print(f"\n‚ùå PROBL√àMES CRITIQUES ({len(issues)}):")
        for issue in issues:
            print(f"   ‚Ä¢ {issue}")
    
    if warnings:
        print(f"\n‚ö†Ô∏è  AVERTISSEMENTS ({len(warnings)}):")
        for warning in warnings:
            print(f"   ‚Ä¢ {warning}")
    
    print("\nüìù RECOMMANDATIONS:")
    if issues:
        print("1. Corrigez imm√©diatement les probl√®mes critiques")
        print("2. Relancez cet audit apr√®s corrections")
    if warnings:
        print("3. Planifiez la r√©solution des avertissements")
    
    print("4. Effectuez cet audit r√©guli√®rement")
    print("5. Surveillez les logs de s√©curit√©")
    
    return len(issues)

def generate_security_report():
    """G√©n√®re un rapport de s√©curit√© d√©taill√©"""
    
    report_filename = f"security_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    with open(report_filename, 'w') as f:
        f.write("RAPPORT D'AUDIT DE S√âCURIT√â GEC MINES\n")
        f.write("=" * 50 + "\n")
        f.write(f"G√©n√©r√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        # Rediriger la sortie vers le fichier temporairement
        original_stdout = sys.stdout
        sys.stdout = f
        
        try:
            check_security_configuration()
        finally:
            sys.stdout = original_stdout
    
    print(f"\nüìä Rapport d√©taill√© sauvegard√©: {report_filename}")
    return report_filename

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == '--report':
        generate_security_report()
    else:
        exit_code = check_security_configuration()
        sys.exit(exit_code)