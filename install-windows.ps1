# =====================================================
# GEC Mines - Script d'Installation Automatique Windows
# =====================================================
# Copyright (c) 2025 MOA Digital Agency LLC
# D√©velopp√© par : AIsance KALONJI wa KALONJI
# Email : moa@myoneart.com | moa.myoneart@gmail.com
# =====================================================

param(
    [string]$InstallPath = "$env:USERPROFILE\gec-mines",
    [switch]$SkipDependencies = $false
)

Write-Host "üöÄ Installation de GEC Mines pour Windows" -ForegroundColor Green
Write-Host "============================================" -ForegroundColor Green
Write-Host ""

# V√©rifier les privil√®ges administrateur
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")

if (-not $isAdmin) {
    Write-Host "‚ö†Ô∏è  ATTENTION: Ex√©cution en tant qu'utilisateur standard" -ForegroundColor Yellow
    Write-Host "   Pour une installation compl√®te, ex√©cutez en tant qu'administrateur" -ForegroundColor Yellow
    Write-Host ""
}

# Fonction pour v√©rifier si une commande existe
function Test-Command {
    param($Command)
    try {
        Get-Command $Command -ErrorAction Stop
        return $true
    }
    catch {
        return $false
    }
}

# √âtape 1: Installer les d√©pendances syst√®me
if (-not $SkipDependencies) {
    Write-Host "üì¶ Installation des d√©pendances syst√®me..." -ForegroundColor Blue
    
    # V√©rifier si winget est disponible
    if (Test-Command "winget") {
        Write-Host "   ‚úÖ winget d√©tect√©"
        
        # Installer Python 3.11
        if (-not (Test-Command "python")) {
            Write-Host "   üì• Installation de Python 3.11..."
            try {
                winget install --id Python.Python.3.11 -e --silent --accept-package-agreements --accept-source-agreements
                Write-Host "   ‚úÖ Python 3.11 install√©"
            }
            catch {
                Write-Host "   ‚ùå Erreur lors de l'installation de Python" -ForegroundColor Red
                Write-Host "   üîó Veuillez t√©l√©charger Python manuellement: https://python.org/downloads/"
                exit 1
            }
        } else {
            Write-Host "   ‚úÖ Python d√©j√† install√©"
        }
        
        # Installer Git
        if (-not (Test-Command "git")) {
            Write-Host "   üì• Installation de Git..."
            try {
                winget install --id Git.Git -e --silent --accept-package-agreements --accept-source-agreements
                Write-Host "   ‚úÖ Git install√©"
            }
            catch {
                Write-Host "   ‚ùå Erreur lors de l'installation de Git" -ForegroundColor Red
                Write-Host "   üîó Veuillez t√©l√©charger Git manuellement: https://git-scm.com/downloads"
                exit 1
            }
        } else {
            Write-Host "   ‚úÖ Git d√©j√† install√©"
        }
    } else {
        Write-Host "   ‚ùå winget non disponible. Installation manuelle requise:" -ForegroundColor Red
        Write-Host "   üîó Python: https://python.org/downloads/" -ForegroundColor Yellow
        Write-Host "   üîó Git: https://git-scm.com/downloads" -ForegroundColor Yellow
        exit 1
    }
}

# Rafra√Æchir les variables d'environnement
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

# √âtape 2: Cloner le projet
Write-Host ""
Write-Host "üìÇ Clonage du projet GEC Mines..." -ForegroundColor Blue

if (Test-Path $InstallPath) {
    Write-Host "   ‚ö†Ô∏è  Le dossier $InstallPath existe d√©j√†" -ForegroundColor Yellow
    $response = Read-Host "   Voulez-vous le supprimer et recommencer? (o/N)"
    if ($response -eq "o" -or $response -eq "O") {
        Remove-Item $InstallPath -Recurse -Force
        Write-Host "   üóëÔ∏è  Dossier supprim√©"
    } else {
        Write-Host "   ‚ùå Installation annul√©e" -ForegroundColor Red
        exit 1
    }
}

try {
    git clone https://github.com/moa-digitalagency/gec.git $InstallPath
    Set-Location $InstallPath
    Write-Host "   ‚úÖ Projet clon√© dans $InstallPath"
}
catch {
    Write-Host "   ‚ùå Erreur lors du clonage du projet" -ForegroundColor Red
    Write-Host "   V√©rifiez votre connexion internet et l'acc√®s √† GitHub"
    exit 1
}

# √âtape 3: Configurer l'environnement Python
Write-Host ""
Write-Host "üêç Configuration de l'environnement Python..." -ForegroundColor Blue

# Configurer la politique d'ex√©cution
try {
    Set-ExecutionPolicy -Scope CurrentUser RemoteSigned -Force
    Write-Host "   ‚úÖ Politique d'ex√©cution configur√©e"
}
catch {
    Write-Host "   ‚ö†Ô∏è  Impossible de modifier la politique d'ex√©cution" -ForegroundColor Yellow
}

# Cr√©er l'environnement virtuel
try {
    python -m venv .venv
    Write-Host "   ‚úÖ Environnement virtuel cr√©√©"
}
catch {
    try {
        py -3.11 -m venv .venv
        Write-Host "   ‚úÖ Environnement virtuel cr√©√© (py -3.11)"
    }
    catch {
        Write-Host "   ‚ùå Erreur lors de la cr√©ation de l'environnement virtuel" -ForegroundColor Red
        exit 1
    }
}

# Activer l'environnement virtuel
try {
    & ".\.venv\Scripts\Activate.ps1"
    Write-Host "   ‚úÖ Environnement virtuel activ√©"
}
catch {
    Write-Host "   ‚ùå Erreur lors de l'activation de l'environnement virtuel" -ForegroundColor Red
    exit 1
}

# √âtape 4: Installer les d√©pendances Python
Write-Host ""
Write-Host "üì¶ Installation des d√©pendances Python..." -ForegroundColor Blue

try {
    python -m pip install -U pip wheel
    Write-Host "   ‚úÖ pip et wheel mis √† jour"
    
    python -m pip install -r project-dependencies.txt
    Write-Host "   ‚úÖ D√©pendances install√©es"
}
catch {
    Write-Host "   ‚ùå Erreur lors de l'installation des d√©pendances" -ForegroundColor Red
    exit 1
}

# √âtape 5: Configuration initiale
Write-Host ""
Write-Host "‚öôÔ∏è  Configuration initiale..." -ForegroundColor Blue

$envFile = ".env"
if (-not (Test-Path $envFile)) {
    $envContent = @"
# Configuration GEC Mines
DATABASE_URL=sqlite:///instance/gecmines.db
SESSION_SECRET=$(([char[]]([char]33..[char]126) | Get-Random -Count 32) -join '')
GEC_MASTER_KEY=$(([char[]]([char]65..[char]90) + [char[]]([char]97..[char]122) + [char[]]([char]48..[char]57) | Get-Random -Count 32) -join '')
GEC_PASSWORD_SALT=$(([char[]]([char]65..[char]90) + [char[]]([char]97..[char]122) + [char[]]([char]48..[char]57) | Get-Random -Count 16) -join '')

# Configuration SMTP (optionnel)
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# SMTP_EMAIL=votre-email@gmail.com
# SMTP_PASSWORD=votre-mot-de-passe-app
# SMTP_USE_TLS=True
"@
    
    $envContent | Out-File -FilePath $envFile -Encoding UTF8
    Write-Host "   ‚úÖ Fichier .env cr√©√© avec configuration par d√©faut"
} else {
    Write-Host "   ‚úÖ Fichier .env existe d√©j√†"
}

# Cr√©er les dossiers n√©cessaires
$folders = @("instance", "uploads", "backups", "exports")
foreach ($folder in $folders) {
    if (-not (Test-Path $folder)) {
        New-Item -ItemType Directory -Path $folder | Out-Null
        Write-Host "   ‚úÖ Dossier '$folder' cr√©√©"
    }
}

# √âtape 6: Test de l'installation
Write-Host ""
Write-Host "üß™ Test de l'installation..." -ForegroundColor Blue

try {
    # Test rapide d'importation
    python -c "import flask, sqlalchemy, cryptography; print('‚úÖ Modules principaux import√©s')"
    Write-Host "   ‚úÖ Test d'importation r√©ussi"
}
catch {
    Write-Host "   ‚ùå Erreur lors du test d'importation" -ForegroundColor Red
}

# Cr√©er des scripts de d√©marrage
$startScript = @"
@echo off
cd /d "$InstallPath"
call .venv\Scripts\activate.bat
python main.py
pause
"@

$startScript | Out-File -FilePath "start-gec.bat" -Encoding ASCII
Write-Host "   ‚úÖ Script de d√©marrage 'start-gec.bat' cr√©√©"

# √âtape 7: Instructions finales
Write-Host ""
Write-Host "üéâ Installation termin√©e avec succ√®s!" -ForegroundColor Green
Write-Host "==========================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìç Dossier d'installation: $InstallPath" -ForegroundColor Cyan
Write-Host ""
Write-Host "üöÄ Pour d√©marrer GEC Mines:" -ForegroundColor Yellow
Write-Host "   1. Double-cliquez sur 'start-gec.bat'"
Write-Host "   2. Ou ex√©cutez manuellement:"
Write-Host "      cd `"$InstallPath`""
Write-Host "      .venv\Scripts\activate"
Write-Host "      python main.py"
Write-Host ""
Write-Host "üåê L'application sera accessible sur: http://localhost:5000" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìß Support: moa@myoneart.com | moa.myoneart@gmail.com" -ForegroundColor Magenta
Write-Host "üåê Site web: https://myoneart.com" -ForegroundColor Magenta
Write-Host ""
Write-Host "¬© 2025 MOA Digital Agency LLC" -ForegroundColor Gray

# Proposer de d√©marrer l'application
Write-Host ""
$startNow = Read-Host "Voulez-vous d√©marrer l'application maintenant? (o/N)"
if ($startNow -eq "o" -or $startNow -eq "O") {
    Write-Host ""
    Write-Host "üöÄ D√©marrage de GEC Mines..." -ForegroundColor Green
    python main.py
}