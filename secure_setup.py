#!/usr/bin/env python3
"""
Script de configuration s√©curis√©e pour GEC Mines
G√©n√®re et sauvegarde les cl√©s de s√©curit√© n√©cessaires
"""

import os
import sys
import secrets
import base64
from pathlib import Path

def generate_secure_keys():
    """G√©n√®re les cl√©s de s√©curit√© n√©cessaires"""
    
    print("=== Configuration S√©curis√©e GEC Mines ===")
    print()
    
    # G√©n√©rer les cl√©s
    master_key = secrets.token_bytes(32)  # 256 bits
    password_salt = secrets.token_bytes(32)  # 256 bits
    session_secret = secrets.token_urlsafe(64)
    
    # Encoder en base64
    master_key_b64 = base64.b64encode(master_key).decode('utf-8')
    password_salt_b64 = base64.b64encode(password_salt).decode('utf-8')
    
    print("‚úÖ Cl√©s de s√©curit√© g√©n√©r√©es avec succ√®s!")
    print()
    
    # Cr√©er le fichier .env
    env_content = f"""# Cl√©s de s√©curit√© GEC Mines - GARDEZ CES CL√âS SECR√àTES!
# G√©n√©r√© le: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# Cl√© ma√Ætre pour le cryptage des donn√©es (AES-256)
GEC_MASTER_KEY={master_key_b64}

# Sel pour le hachage des mots de passe
GEC_PASSWORD_SALT={password_salt_b64}

# Cl√© secr√®te pour les sessions Flask
SESSION_SECRET={session_secret}

# Configuration de base de donn√©es (modifiez selon vos besoins)
# DATABASE_URL=postgresql://user:password@localhost/gec_mines
"""
    
    # Sauvegarder dans .env
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Fichier .env cr√©√© avec les variables d'environnement")
    print()
    
    # Cr√©er un fichier de sauvegarde s√©curis√©
    backup_content = f"""=== SAUVEGARDE DES CL√âS GEC MINES ===
Date de g√©n√©ration: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ö†Ô∏è  IMPORTANT: Gardez ces informations dans un endroit s√ªr!
‚ö†Ô∏è  Ces cl√©s sont n√©cessaires pour d√©crypter vos donn√©es.
‚ö†Ô∏è  Si vous les perdez, vos donn√©es crypt√©es seront irr√©cup√©rables!

Variables d'environnement √† d√©finir:

GEC_MASTER_KEY={master_key_b64}
GEC_PASSWORD_SALT={password_salt_b64}  
SESSION_SECRET={session_secret}

Instructions de d√©ploiement:
1. Sur votre serveur de production, d√©finissez ces variables d'environnement
2. Ne committez JAMAIS ces cl√©s dans votre d√©p√¥t Git
3. Utilisez un gestionnaire de secrets en production (ex: Azure Key Vault, AWS Secrets Manager)
4. Effectuez des sauvegardes r√©guli√®res de ces cl√©s

Pour Replit:
Allez dans l'onglet "Secrets" et ajoutez chaque variable.

Pour les serveurs:
export GEC_MASTER_KEY="{master_key_b64}"
export GEC_PASSWORD_SALT="{password_salt_b64}"
export SESSION_SECRET="{session_secret}"

=== FIN DE LA SAUVEGARDE ===
"""
    
    backup_filename = f"keys_backup_{__import__('datetime').datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(backup_filename, 'w') as f:
        f.write(backup_content)
    
    print(f"‚úÖ Sauvegarde cr√©√©e: {backup_filename}")
    print()
    
    # Afficher les instructions
    print("üîê INSTRUCTIONS DE S√âCURIT√â:")
    print("1. Le fichier .env a √©t√© cr√©√© pour le d√©veloppement local")
    print("2. Un fichier de sauvegarde a √©t√© g√©n√©r√©")
    print("3. Ajoutez ces variables √† vos Secrets Replit:")
    print()
    print(f"   GEC_MASTER_KEY = {master_key_b64}")
    print(f"   GEC_PASSWORD_SALT = {password_salt_b64}")
    print(f"   SESSION_SECRET = {session_secret}")
    print()
    print("4. ‚ö†Ô∏è  IMPORTANT: Ne partagez jamais ces cl√©s!")
    print("5. ‚ö†Ô∏è  Sauvegardez le fichier de backup dans un endroit s√ªr!")
    print()
    
    # Cr√©er un gitignore si n√©cessaire
    gitignore_content = """
# Fichiers de s√©curit√© - NE PAS COMMITTER!
.env
keys_backup_*.txt
*.key
*.pem

# Dossiers de cache
__pycache__/
*.py[cod]
*$py.class

# Fichiers temporaires
*.tmp
temp/
.temp/

# Logs de s√©curit√©
security.log
audit.log
"""
    
    if not os.path.exists('.gitignore'):
        with open('.gitignore', 'w') as f:
            f.write(gitignore_content)
        print("‚úÖ Fichier .gitignore cr√©√©")
    else:
        # Ajouter les r√®gles de s√©curit√© au gitignore existant
        with open('.gitignore', 'r') as f:
            content = f.read()
        
        if '.env' not in content:
            with open('.gitignore', 'a') as f:
                f.write('\n# Fichiers de s√©curit√©\n.env\nkeys_backup_*.txt\n')
            print("‚úÖ R√®gles de s√©curit√© ajout√©es au .gitignore")
    
    print()
    print("üöÄ Configuration s√©curis√©e termin√©e!")
    print("Votre application GEC Mines est maintenant configur√©e avec un cryptage fort.")

def migrate_existing_data():
    """Migre les donn√©es existantes vers le format crypt√©"""
    print("\n=== Migration des donn√©es existantes ===")
    
    try:
        # Import apr√®s configuration
        from app import app, db
        from models import User, Courrier
        from encryption_utils import encryption_manager
        
        with app.app_context():
            print("Migration des utilisateurs...")
            users = User.query.all()
            for user in users:
                if not user.email_encrypted and user.email:
                    try:
                        user.set_encrypted_email(user.email)
                        user.set_encrypted_nom_complet(user.nom_complet)
                        if user.matricule:
                            user.set_encrypted_matricule(user.matricule)
                        if user.fonction:
                            user.set_encrypted_fonction(user.fonction)
                        # Re-crypter le hash du mot de passe pour plus de s√©curit√©
                        user.set_encrypted_password(user.password_hash)
                    except Exception as e:
                        print(f"Erreur lors du cryptage des donn√©es utilisateur {user.username}: {e}")
            
            print("Migration des courriers...")
            courriers = Courrier.query.all()
            for courrier in courriers:
                if not courrier.objet_encrypted and courrier.objet:
                    try:
                        courrier.set_encrypted_objet(courrier.objet)
                        if courrier.expediteur:
                            courrier.set_encrypted_expediteur(courrier.expediteur)
                        if courrier.destinataire:
                            courrier.set_encrypted_destinataire(courrier.destinataire)
                        if courrier.numero_reference:
                            courrier.set_encrypted_reference(courrier.numero_reference)
                        
                        # Calculer le checksum des fichiers existants
                        if courrier.fichier_chemin and not courrier.fichier_checksum:
                            file_path = os.path.join('uploads', courrier.fichier_chemin)
                            if os.path.exists(file_path):
                                courrier.set_file_checksum(file_path)
                    except Exception as e:
                        print(f"Erreur lors du cryptage des donn√©es courrier {courrier.numero_accuse_reception}: {e}")
            
            db.session.commit()
            print("‚úÖ Migration termin√©e avec succ√®s!")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {e}")
        print("La migration peut √™tre effectu√©e manuellement plus tard.")

if __name__ == '__main__':
    generate_secure_keys()
    
    # Demander si l'utilisateur veut migrer les donn√©es existantes
    if len(sys.argv) > 1 and sys.argv[1] == '--migrate':
        migrate_existing_data()
    else:
        print("\nPour migrer les donn√©es existantes, ex√©cutez:")
        print("python secure_setup.py --migrate")